#!/usr/bin/env python

import argparse


def main():

    # Top-level parser
    parser = argparse.ArgumentParser(
        description=(
            "SAT - Structural Analysis Toolkit. A python package for manipulating "
            "predicted structures and structural alignments."
        ),
        usage="""python SAT.py <subcommand> [options]""",
    )
    subparsers = parser.add_subparsers(
        title="Subcommands",
        required=True,
    )

    # -------------------------------------------------------------------------------- #
    # Parser for get_domains subcommand
    # -------------------------------------------------------------------------------- #
    parser_get_domains = subparsers.add_parser(
        "get_domains",
        help=(
            "Extract domains from a structure using PAE information. Notably, this "
            "script is designed for colabfold-generated pae json files. json files "
            "generated by other structural prediction software likely will not work."
        ),
    )
    parser_get_domains.add_argument(
        "-s",
        "--structure_file_path",
        type=str,
        required=True,
        default="",
        help="""
        Path to the input structure in .pdb format.
        """,
    )
    parser_get_domains.add_argument(
        "-p",
        "--pae_path",
        type=str,
        required=True,
        default="",
        help="""
        Path to the pae .json file.
        """,
    )
    parser_get_domains.add_argument(
        "-o",
        "--output_prefix",
        type=str,
        required=True,
        default="",
        help="""
        Prefix of resultant output files. Files will be labled {prefix}_domain-{i}.pdb.
        Note that the domain number will be 1-indexed.
        """,
    )
    parser_get_domains.add_argument(
        "-1",
        "--pae_power",
        type=int,
        required=False,
        default=1,
        help="""
        Default: 1
        Each edge in the graph will be weighted proportional to (1/pae**pae_power)
        """,
    )
    parser_get_domains.add_argument(
        "-2",
        "--pae_cutoff",
        type=int,
        required=False,
        default=5,
        help="""
        Default: 5
        Graph edges will only be created for residue pairs with pae<pae_cutoff. Lowering
        this will make domain identification more stringent by reducing the amount of
        error allowed.
        """,
    )
    parser_get_domains.add_argument(
        "-3",
        "--graph_resolution",
        type=int,
        required=False,
        default=1,
        help="""
        Default: 1
        Regulates how aggressively the clustering algorithm is. Smaller values lead to
        larger clusters. Value should be larger than zero, and values larger than 5 are
        unlikely to be useful.
        """,
    )
    parser_get_domains.set_defaults(func=call_get_domains)

    # -------------------------------------------------------------------------------- #
    # Parser for call_X subcommand
    # -------------------------------------------------------------------------------- #
    parser_call_X = subparsers.add_parser("call_X", help="Doing another cool thingy")
    parser_call_X.add_argument(
        "-i",
        "--input",
        type=str,
        required=True,
        default="",
        help="""
        input here
        """,
    )
    parser_call_X.set_defaults(func=call_X)

    # Parse the args and call the function associated with the subcommand
    args = parser.parse_args()
    args.func(args)


def call_get_domains(args):
    from scripts.get_domains import get_domains_main

    get_domains_main(args)


def call_X(args):
    print(args.input)


if __name__ == "__main__":
    main()
